{
  "settings": {
    "servers": [
      {
        "url": "{{HYDRA_PUBLIC_SERVER_URL:-http://localhost:4444}}"
      }
    ],
    "timeout": "{{HYDRA_PUBLIC_TIMEOUT}}",
    "retry": {
      "times": "{{HYDRA_PUBLIC_RETRY_TIMES}}",
      "delay": "{{HYDRA_PUBLIC_RETRY_DELAY}}",
      "httpStatus": "{{HYDRA_PUBLIC_RETRY_HTTP_STATUS}}"
    }
  },
  "collections": [],
  "functions": [
    {
      "request": {
        "url": "/.well-known/jwks.json",
        "method": "get"
      },
      "arguments": {},
      "description": "Discover Well-Known JSON Web Keys",
      "name": "discoverJsonWebKeys",
      "result_type": {
        "name": "JsonWebKeySet",
        "type": "named"
      }
    },
    {
      "request": {
        "url": "/.well-known/openid-configuration",
        "method": "get"
      },
      "arguments": {},
      "description": "OpenID Connect Discovery",
      "name": "discoverOidcConfiguration",
      "result_type": {
        "name": "OidcConfiguration",
        "type": "named"
      }
    },
    {
      "request": {
        "url": "/health/ready",
        "method": "get"
      },
      "arguments": {},
      "description": "Check HTTP Server and Database Status",
      "name": "isReady",
      "result_type": {
        "name": "IsReady200Response",
        "type": "named"
      }
    },
    {
      "request": {
        "url": "/oauth2/auth",
        "method": "get"
      },
      "arguments": {},
      "description": "OAuth 2.0 Authorize Endpoint",
      "name": "oAuth2Authorize",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    {
      "request": {
        "url": "/oauth2/register/{id}",
        "method": "get",
        "parameters": [
          {
            "style": "simple",
            "explode": false,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "String"
            }
          }
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "arguments": {
        "id": {
          "description": "The id of the OAuth 2.0 Client.",
          "type": {
            "name": "String",
            "type": "named"
          }
        }
      },
      "description": "Get OAuth2 Client using OpenID Dynamic Client Registration",
      "name": "getOidcDynamicClient",
      "result_type": {
        "name": "OAuth2Client",
        "type": "named"
      }
    },
    {
      "request": {
        "url": "/oauth2/sessions/logout",
        "method": "get"
      },
      "arguments": {},
      "description": "OpenID Connect Front- and Back-channel Enabled Logout",
      "name": "revokeOidcSession",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    }
  ],
  "object_types": {
    "CreateVerifiableCredentialRequestBody": {
      "fields": {
        "format": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "proof": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "VerifiableCredentialProof",
              "type": "named"
            }
          }
        },
        "types": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          }
        }
      }
    },
    "CredentialSupportedDraft00": {
      "description": "Includes information about the supported verifiable credentials.",
      "fields": {
        "cryptographic_binding_methods_supported": {
          "description": "OpenID Connect Verifiable Credentials Cryptographic Binding Methods Supported\n\nContains a list of cryptographic binding methods supported for signing the proof.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          }
        },
        "cryptographic_suites_supported": {
          "description": "OpenID Connect Verifiable Credentials Cryptographic Suites Supported\n\nContains a list of cryptographic suites methods supported for signing the proof.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          }
        },
        "format": {
          "description": "OpenID Connect Verifiable Credentials Format\n\nContains the format that is supported by this authorization server.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "types": {
          "description": "OpenID Connect Verifiable Credentials Types\n\nContains the types of verifiable credentials supported.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          }
        }
      }
    },
    "IsReady200Response": {
      "fields": {
        "status": {
          "description": "Always \"ok\".",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        }
      }
    },
    "JsonWebKey": {
      "fields": {
        "alg": {
          "description": "The \"alg\" (algorithm) parameter identifies the algorithm intended for\nuse with the key.  The values used should either be registered in the\nIANA \"JSON Web Signature and Encryption Algorithms\" registry\nestablished by [JWA] or be a value that contains a Collision-\nResistant Name.",
          "type": {
            "name": "String",
            "type": "named"
          }
        },
        "crv": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "d": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "dp": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "dq": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "e": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "k": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "kid": {
          "description": "The \"kid\" (key ID) parameter is used to match a specific key.  This\nis used, for instance, to choose among a set of keys within a JWK Set\nduring key rollover.  The structure of the \"kid\" value is\nunspecified.  When \"kid\" values are used within a JWK Set, different\nkeys within the JWK Set SHOULD use distinct \"kid\" values.  (One\nexample in which different keys might use the same \"kid\" value is if\nthey have different \"kty\" (key type) values but are considered to be\nequivalent alternatives by the application using them.)  The \"kid\"\nvalue is a case-sensitive string.",
          "type": {
            "name": "String",
            "type": "named"
          }
        },
        "kty": {
          "description": "The \"kty\" (key type) parameter identifies the cryptographic algorithm\nfamily used with the key, such as \"RSA\" or \"EC\". \"kty\" values should\neither be registered in the IANA \"JSON Web Key Types\" registry\nestablished by [JWA] or be a value that contains a Collision-\nResistant Name.  The \"kty\" value is a case-sensitive string.",
          "type": {
            "name": "String",
            "type": "named"
          }
        },
        "n": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "p": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "q": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "qi": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "use": {
          "description": "Use (\"public key use\") identifies the intended use of\nthe public key. The \"use\" parameter is employed to indicate whether\na public key is used for encrypting data or verifying the signature\non data. Values are commonly \"sig\" (signature) or \"enc\" (encryption).",
          "type": {
            "name": "String",
            "type": "named"
          }
        },
        "x": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "x5c": {
          "description": "The \"x5c\" (X.509 certificate chain) parameter contains a chain of one\nor more PKIX certificates [RFC5280].  The certificate chain is\nrepresented as a JSON array of certificate value strings.  Each\nstring in the array is a base64-encoded (Section 4 of [RFC4648] --\nnot base64url-encoded) DER [ITU.X690.1994] PKIX certificate value.\nThe PKIX certificate containing the key value MUST be the first\ncertificate.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          }
        },
        "y": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        }
      }
    },
    "JsonWebKeySet": {
      "description": "JSON Web Key Set",
      "fields": {
        "keys": {
          "description": "List of JSON Web Keys\n\nThe value of the \"keys\" parameter is an array of JSON Web Key (JWK)\nvalues. By default, the order of the JWK values within the array does\nnot imply an order of preference among them, although applications\nof JWK Sets can choose to assign a meaning to the order for their\npurposes, if desired.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "JsonWebKey",
                "type": "named"
              },
              "type": "array"
            }
          }
        }
      }
    },
    "OAuth2Client": {
      "description": "OAuth 2.0 Clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are\ngenerated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.",
      "fields": {
        "access_token_strategy": {
          "description": "OAuth 2.0 Access Token Strategy\n\nAccessTokenStrategy is the strategy used to generate access tokens.\nValid options are `jwt` and `opaque`. `jwt` is a bad idea, see https://www.ory.sh/docs/hydra/advanced#json-web-tokens\nSetting the stragegy here overrides the global setting in `strategies.access_token`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "allowed_cors_origins": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          }
        },
        "audience": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          }
        },
        "authorization_code_grant_access_token_lifespan": {
          "description": "Specify a time duration in milliseconds, seconds, minutes, hours.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "authorization_code_grant_id_token_lifespan": {
          "description": "Specify a time duration in milliseconds, seconds, minutes, hours.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "authorization_code_grant_refresh_token_lifespan": {
          "description": "Specify a time duration in milliseconds, seconds, minutes, hours.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "backchannel_logout_session_required": {
          "description": "OpenID Connect Back-Channel Logout Session Required\n\nBoolean value specifying whether the RP requires that a sid (session ID) Claim be included in the Logout\nToken to identify the RP session with the OP when the backchannel_logout_uri is used.\nIf omitted, the default value is false.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          }
        },
        "backchannel_logout_uri": {
          "description": "OpenID Connect Back-Channel Logout URI\n\nRP URL that will cause the RP to log itself out when sent a Logout Token by the OP.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "client_credentials_grant_access_token_lifespan": {
          "description": "Specify a time duration in milliseconds, seconds, minutes, hours.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "client_id": {
          "description": "OAuth 2.0 Client ID\n\nThe ID is immutable. If no ID is provided, a UUID4 will be generated.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "client_name": {
          "description": "OAuth 2.0 Client Name\n\nThe human-readable name of the client to be presented to the\nend-user during authorization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "client_secret": {
          "description": "OAuth 2.0 Client Secret\n\nThe secret will be included in the create request as cleartext, and then\nnever again. The secret is kept in hashed format and is not recoverable once lost.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "client_secret_expires_at": {
          "description": "OAuth 2.0 Client Secret Expires At\n\nThe field is currently not supported and its value is always 0.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          }
        },
        "client_uri": {
          "description": "OAuth 2.0 Client URI\n\nClientURI is a URL string of a web page providing information about the client.\nIf present, the server SHOULD display this URL to the end-user in\na clickable fashion.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "contacts": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          }
        },
        "created_at": {
          "description": "OAuth 2.0 Client Creation Date\n\nCreatedAt returns the timestamp of the client's creation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          }
        },
        "frontchannel_logout_session_required": {
          "description": "OpenID Connect Front-Channel Logout Session Required\n\nBoolean value specifying whether the RP requires that iss (issuer) and sid (session ID) query parameters be\nincluded to identify the RP session with the OP when the frontchannel_logout_uri is used.\nIf omitted, the default value is false.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          }
        },
        "frontchannel_logout_uri": {
          "description": "OpenID Connect Front-Channel Logout URI\n\nRP URL that will cause the RP to log itself out when rendered in an iframe by the OP. An iss (issuer) query\nparameter and a sid (session ID) query parameter MAY be included by the OP to enable the RP to validate the\nrequest and to determine which of the potentially multiple sessions is to be logged out; if either is\nincluded, both MUST be.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "grant_types": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "OAuth2GrantType",
                "type": "named"
              },
              "type": "array"
            }
          }
        },
        "implicit_grant_access_token_lifespan": {
          "description": "Specify a time duration in milliseconds, seconds, minutes, hours.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "implicit_grant_id_token_lifespan": {
          "description": "Specify a time duration in milliseconds, seconds, minutes, hours.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "jwks": {
          "description": "OAuth 2.0 Client JSON Web Key Set\n\nClient's JSON Web Key Set [JWK] document, passed by value. The semantics of the jwks parameter are the same as\nthe jwks_uri parameter, other than that the JWK Set is passed by value, rather than by reference. This parameter\nis intended only to be used by Clients that, for some reason, are unable to use the jwks_uri parameter, for\ninstance, by native applications that might not have a location to host the contents of the JWK Set. If a Client\ncan use jwks_uri, it MUST NOT use jwks. One significant downside of jwks is that it does not enable key rotation\n(which jwks_uri does, as described in Section 10 of OpenID Connect Core 1.0 [OpenID.Core]). The jwks_uri and jwks\nparameters MUST NOT be used together.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          }
        },
        "jwks_uri": {
          "description": "OAuth 2.0 Client JSON Web Key Set URL\n\nURL for the Client's JSON Web Key Set [JWK] document. If the Client signs requests to the Server, it contains\nthe signing key(s) the Server uses to validate signatures from the Client. The JWK Set MAY also contain the\nClient's encryption keys(s), which are used by the Server to encrypt responses to the Client. When both signing\nand encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced\nJWK Set to indicate each key's intended usage. Although some algorithms allow the same key to be used for both\nsignatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used\nto provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST\nmatch those in the certificate.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "jwt_bearer_grant_access_token_lifespan": {
          "description": "Specify a time duration in milliseconds, seconds, minutes, hours.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "logo_uri": {
          "description": "OAuth 2.0 Client Logo URI\n\nA URL string referencing the client's logo.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "metadata": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          }
        },
        "owner": {
          "description": "OAuth 2.0 Client Owner\n\nOwner is a string identifying the owner of the OAuth 2.0 Client.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "policy_uri": {
          "description": "OAuth 2.0 Client Policy URI\n\nPolicyURI is a URL string that points to a human-readable privacy policy document\nthat describes how the deployment organization collects, uses,\nretains, and discloses personal data.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "post_logout_redirect_uris": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          }
        },
        "redirect_uris": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          }
        },
        "refresh_token_grant_access_token_lifespan": {
          "description": "Specify a time duration in milliseconds, seconds, minutes, hours.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "refresh_token_grant_id_token_lifespan": {
          "description": "Specify a time duration in milliseconds, seconds, minutes, hours.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "refresh_token_grant_refresh_token_lifespan": {
          "description": "Specify a time duration in milliseconds, seconds, minutes, hours.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "registration_access_token": {
          "description": "OpenID Connect Dynamic Client Registration Access Token\n\nRegistrationAccessToken can be used to update, get, or delete the OAuth2 Client. It is sent when creating a client\nusing Dynamic Client Registration.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "registration_client_uri": {
          "description": "OpenID Connect Dynamic Client Registration URL\n\nRegistrationClientURI is the URL used to update, get, or delete the OAuth2 Client.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "request_object_signing_alg": {
          "description": "OpenID Connect Request Object Signing Algorithm\n\nJWS [JWS] alg algorithm [JWA] that MUST be used for signing Request Objects sent to the OP. All Request Objects\nfrom this Client MUST be rejected, if not signed with this algorithm.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuth2SigningAlgorithm",
              "type": "named"
            }
          }
        },
        "request_uris": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          }
        },
        "response_types": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "OAuth2ResponseType",
                "type": "named"
              },
              "type": "array"
            }
          }
        },
        "scope": {
          "description": "OAuth 2.0 Client Scope\n\nScope is a string containing a space-separated list of scope values (as\ndescribed in Section 3.3 of OAuth 2.0 [RFC6749]) that the client\ncan use when requesting access tokens.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuth2Scope",
              "type": "named"
            }
          }
        },
        "sector_identifier_uri": {
          "description": "OpenID Connect Sector Identifier URI\n\nURL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP. The URL references a\nfile with a single JSON array of redirect_uri values.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "skip_consent": {
          "description": "SkipConsent skips the consent screen for this client. This field can only\nbe set from the admin API.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          }
        },
        "skip_logout_consent": {
          "description": "SkipLogoutConsent skips the logout consent screen for this client. This field can only\nbe set from the admin API.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          }
        },
        "subject_type": {
          "description": "OpenID Connect Subject Type\n\nThe `subject_types_supported` Discovery parameter contains a\nlist of the supported subject_type values for this server. Valid types include `pairwise` and `public`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OpenIDConnectSubjectType",
              "type": "named"
            }
          }
        },
        "token_endpoint_auth_method": {
          "description": "OAuth 2.0 Token Endpoint Authentication Method\n\nRequested Client Authentication method for the Token Endpoint. The options are:\n\n`client_secret_basic`: (default) Send `client_id` and `client_secret` as `application/x-www-form-urlencoded` encoded in the HTTP Authorization header.\n`client_secret_post`: Send `client_id` and `client_secret` as `application/x-www-form-urlencoded` in the HTTP body.\n`private_key_jwt`: Use JSON Web Tokens to authenticate the client.\n`none`: Used for public clients (native apps, mobile apps) which can not have secrets.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TokenEndpointAuthMethod",
              "type": "named"
            }
          }
        },
        "token_endpoint_auth_signing_alg": {
          "description": "OAuth 2.0 Token Endpoint Signing Algorithm\n\nRequested Client Authentication signing algorithm for the Token Endpoint.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuth2SigningAlgorithm",
              "type": "named"
            }
          }
        },
        "tos_uri": {
          "description": "OAuth 2.0 Client Terms of Service URI\n\nA URL string pointing to a human-readable terms of service\ndocument for the client that describes a contractual relationship\nbetween the end-user and the client that the end-user accepts when\nauthorizing the client.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "updated_at": {
          "description": "OAuth 2.0 Client Last Update Date\n\nUpdatedAt returns the timestamp of the last update.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          }
        },
        "userinfo_signed_response_alg": {
          "description": "OpenID Connect Request Userinfo Signed Response Algorithm\n\nJWS alg algorithm [JWA] REQUIRED for signing UserInfo Responses. If this is specified, the response will be JWT\n[JWT] serialized, and signed using JWS. The default, if omitted, is for the UserInfo Response to return the Claims\nas a UTF-8 encoded JSON object using the application/json content-type.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuth2SigningAlgorithm",
              "type": "named"
            }
          }
        }
      }
    },
    "OAuth2TokenExchange": {
      "description": "OAuth2 Token Exchange Result",
      "fields": {
        "access_token": {
          "description": "The access token issued by the authorization server.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "expires_in": {
          "description": "The lifetime in seconds of the access token. For\nexample, the value \"3600\" denotes that the access token will\nexpire in one hour from the time the response was generated.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          }
        },
        "id_token": {
          "description": "To retrieve a refresh token request the id_token scope.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "refresh_token": {
          "description": "The refresh token, which can be used to obtain new\naccess tokens. To retrieve it add the scope \"offline\" to your access token request.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "scope": {
          "description": "The scope of the access token",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "token_type": {
          "description": "The type of the token issued",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        }
      }
    },
    "Oauth2TokenExchangeRequest": {
      "fields": {
        "client_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "client_secret": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "code": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "grant_type": {
          "type": {
            "name": "String",
            "type": "named"
          }
        },
        "redirect_uri": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "refresh_token": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "scope": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        }
      }
    },
    "OidcConfiguration": {
      "description": "Includes links to several endpoints (for example `/oauth2/token`) and exposes information on supported signature algorithms\namong others.",
      "fields": {
        "authorization_endpoint": {
          "description": "OAuth 2.0 Authorization Endpoint URL",
          "type": {
            "name": "String",
            "type": "named"
          }
        },
        "backchannel_logout_session_supported": {
          "description": "OpenID Connect Back-Channel Logout Session Required\n\nBoolean value specifying whether the OP can pass a sid (session ID) Claim in the Logout Token to identify the RP\nsession with the OP. If supported, the sid Claim is also included in ID Tokens issued by the OP",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          }
        },
        "backchannel_logout_supported": {
          "description": "OpenID Connect Back-Channel Logout Supported\n\nBoolean value specifying whether the OP supports back-channel logout, with true indicating support.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          }
        },
        "claims_parameter_supported": {
          "description": "OpenID Connect Claims Parameter Parameter Supported\n\nBoolean value specifying whether the OP supports use of the claims parameter, with true indicating support.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          }
        },
        "claims_supported": {
          "description": "OpenID Connect Supported Claims\n\nJSON array containing a list of the Claim Names of the Claims that the OpenID Provider MAY be able to supply\nvalues for. Note that for privacy or other reasons, this might not be an exhaustive list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          }
        },
        "code_challenge_methods_supported": {
          "description": "OAuth 2.0 PKCE Supported Code Challenge Methods\n\nJSON array containing a list of Proof Key for Code Exchange (PKCE) [RFC7636] code challenge methods supported\nby this authorization server.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "OAuth2CodeChallenge",
                "type": "named"
              },
              "type": "array"
            }
          }
        },
        "credentials_endpoint_draft_00": {
          "description": "OpenID Connect Verifiable Credentials Endpoint\n\nContains the URL of the Verifiable Credentials Endpoint.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "credentials_supported_draft_00": {
          "description": "OpenID Connect Verifiable Credentials Supported\n\nJSON array containing a list of the Verifiable Credentials supported by this authorization server.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "CredentialSupportedDraft00",
                "type": "named"
              },
              "type": "array"
            }
          }
        },
        "end_session_endpoint": {
          "description": "OpenID Connect End-Session Endpoint\n\nURL at the OP to which an RP can perform a redirect to request that the End-User be logged out at the OP.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "frontchannel_logout_session_supported": {
          "description": "OpenID Connect Front-Channel Logout Session Required\n\nBoolean value specifying whether the OP can pass iss (issuer) and sid (session ID) query parameters to identify\nthe RP session with the OP when the frontchannel_logout_uri is used. If supported, the sid Claim is also\nincluded in ID Tokens issued by the OP.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          }
        },
        "frontchannel_logout_supported": {
          "description": "OpenID Connect Front-Channel Logout Supported\n\nBoolean value specifying whether the OP supports HTTP-based logout, with true indicating support.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          }
        },
        "grant_types_supported": {
          "description": "OAuth 2.0 Supported Grant Types\n\nJSON array containing a list of the OAuth 2.0 Grant Type values that this OP supports.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "OAuth2GrantType",
                "type": "named"
              },
              "type": "array"
            }
          }
        },
        "id_token_signed_response_alg": {
          "description": "OpenID Connect Default ID Token Signing Algorithms\n\nAlgorithm used to sign OpenID Connect ID Tokens.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          }
        },
        "id_token_signing_alg_values_supported": {
          "description": "OpenID Connect Supported ID Token Signing Algorithms\n\nJSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for the ID Token\nto encode the Claims in a JWT.",
          "type": {
            "element_type": {
              "name": "OAuth2SigningAlgorithm",
              "type": "named"
            },
            "type": "array"
          }
        },
        "issuer": {
          "description": "OpenID Connect Issuer URL\n\nAn URL using the https scheme with no query or fragment component that the OP asserts as its IssuerURL Identifier.\nIf IssuerURL discovery is supported , this value MUST be identical to the issuer value returned\nby WebFinger. This also MUST be identical to the iss Claim value in ID Tokens issued from this IssuerURL.",
          "type": {
            "name": "String",
            "type": "named"
          }
        },
        "jwks_uri": {
          "description": "OpenID Connect Well-Known JSON Web Keys URL\n\nURL of the OP's JSON Web Key Set [JWK] document. This contains the signing key(s) the RP uses to validate\nsignatures from the OP. The JWK Set MAY also contain the Server's encryption key(s), which are used by RPs\nto encrypt requests to the Server. When both signing and encryption keys are made available, a use (Key Use)\nparameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key's intended usage.\nAlthough some algorithms allow the same key to be used for both signatures and encryption, doing so is\nNOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of\nkeys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.",
          "type": {
            "name": "String",
            "type": "named"
          }
        },
        "registration_endpoint": {
          "description": "OpenID Connect Dynamic Client Registration Endpoint URL",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "request_object_signing_alg_values_supported": {
          "description": "OpenID Connect Supported Request Object Signing Algorithms\n\nJSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for Request Objects,\nwhich are described in Section 6.1 of OpenID Connect Core 1.0 [OpenID.Core]. These algorithms are used both when\nthe Request Object is passed by value (using the request parameter) and when it is passed by reference\n(using the request_uri parameter).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "OAuth2SigningAlgorithm",
                "type": "named"
              },
              "type": "array"
            }
          }
        },
        "request_parameter_supported": {
          "description": "OpenID Connect Request Parameter Supported\n\nBoolean value specifying whether the OP supports use of the request parameter, with true indicating support.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          }
        },
        "request_uri_parameter_supported": {
          "description": "OpenID Connect Request URI Parameter Supported\n\nBoolean value specifying whether the OP supports use of the request_uri parameter, with true indicating support.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          }
        },
        "require_request_uri_registration": {
          "description": "OpenID Connect Requires Request URI Registration\n\nBoolean value specifying whether the OP requires any request_uri values used to be pre-registered\nusing the request_uris registration parameter.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          }
        },
        "response_modes_supported": {
          "description": "OAuth 2.0 Supported Response Modes\n\nJSON array containing a list of the OAuth 2.0 response_mode values that this OP supports.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          }
        },
        "response_types_supported": {
          "description": "OAuth 2.0 Supported Response Types\n\nJSON array containing a list of the OAuth 2.0 response_type values that this OP supports. Dynamic OpenID\nProviders MUST support the code, id_token, and the token id_token Response Type values.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          }
        },
        "revocation_endpoint": {
          "description": "OAuth 2.0 Token Revocation URL\n\nURL of the authorization server's OAuth 2.0 revocation endpoint.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "scopes_supported": {
          "description": "OAuth 2.0 Supported Scope Values\n\nJSON array containing a list of the OAuth 2.0 [RFC6749] scope values that this server supports. The server MUST\nsupport the openid scope value. Servers MAY choose not to advertise some supported scope values even when this parameter is used",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "OAuth2Scope",
                "type": "named"
              },
              "type": "array"
            }
          }
        },
        "subject_types_supported": {
          "description": "OpenID Connect Supported Subject Types\n\nJSON array containing a list of the Subject Identifier types that this OP supports. Valid types include\npairwise and public.",
          "type": {
            "element_type": {
              "name": "OpenIDConnectSubjectType",
              "type": "named"
            },
            "type": "array"
          }
        },
        "token_endpoint": {
          "description": "OAuth 2.0 Token Endpoint URL",
          "type": {
            "name": "String",
            "type": "named"
          }
        },
        "token_endpoint_auth_methods_supported": {
          "description": "OAuth 2.0 Supported Client Authentication Methods\n\nJSON array containing a list of Client Authentication methods supported by this Token Endpoint. The options are\nclient_secret_post, client_secret_basic, client_secret_jwt, and private_key_jwt, as described in Section 9 of OpenID Connect Core 1.0",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "TokenEndpointAuthMethod",
                "type": "named"
              },
              "type": "array"
            }
          }
        },
        "userinfo_endpoint": {
          "description": "OpenID Connect Userinfo URL\n\nURL of the OP's UserInfo Endpoint.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "userinfo_signed_response_alg": {
          "description": "OpenID Connect User Userinfo Signing Algorithm\n\nAlgorithm used to sign OpenID Connect Userinfo Responses.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          }
        },
        "userinfo_signing_alg_values_supported": {
          "description": "OpenID Connect Supported Userinfo Signing Algorithm\n\nJSON array containing a list of the JWS [JWS] signing algorithms (alg values) [JWA] supported by the UserInfo Endpoint to encode the Claims in a JWT [JWT].",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "OAuth2SigningAlgorithm",
                "type": "named"
              },
              "type": "array"
            }
          }
        }
      }
    },
    "RevokeOAuth2TokenRequest": {
      "fields": {
        "client_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "client_secret": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "token": {
          "type": {
            "name": "String",
            "type": "named"
          }
        }
      }
    },
    "VerifiableCredentialProof": {
      "fields": {
        "jwt": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "proof_type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        }
      }
    },
    "VerifiableCredentialResponse": {
      "fields": {
        "credential_draft_00": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "format": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        }
      }
    }
  },
  "procedures": [
    {
      "request": {
        "url": "/credentials",
        "method": "post",
        "requestBody": {
          "contentType": "application/json",
          "schema": {
            "type": "CreateVerifiableCredentialRequestBody",
            "nullable": true
          }
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /credentials",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateVerifiableCredentialRequestBody",
              "type": "named"
            }
          }
        }
      },
      "description": "Issues a Verifiable Credential",
      "name": "createVerifiableCredential",
      "result_type": {
        "name": "VerifiableCredentialResponse",
        "type": "named"
      }
    },
    {
      "request": {
        "url": "/oauth2/register",
        "method": "post",
        "requestBody": {
          "contentType": "application/json",
          "schema": {
            "type": "OAuth2Client"
          }
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /oauth2/register",
          "type": {
            "name": "OAuth2Client",
            "type": "named"
          }
        }
      },
      "description": "Register OAuth2 Client using OpenID Dynamic Client Registration",
      "name": "createOidcDynamicClient",
      "result_type": {
        "name": "OAuth2Client",
        "type": "named"
      }
    },
    {
      "request": {
        "url": "/oauth2/register/{id}",
        "method": "put",
        "parameters": [
          {
            "style": "simple",
            "explode": false,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "String"
            }
          }
        ],
        "security": [
          {
            "bearer": []
          }
        ],
        "requestBody": {
          "contentType": "application/json",
          "schema": {
            "type": "OAuth2Client"
          }
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /oauth2/register/{id}",
          "type": {
            "name": "OAuth2Client",
            "type": "named"
          }
        },
        "id": {
          "description": "OAuth 2.0 Client ID",
          "type": {
            "name": "String",
            "type": "named"
          }
        }
      },
      "description": "Set OAuth2 Client using OpenID Dynamic Client Registration",
      "name": "setOidcDynamicClient",
      "result_type": {
        "name": "OAuth2Client",
        "type": "named"
      }
    },
    {
      "request": {
        "url": "/oauth2/register/{id}",
        "method": "delete",
        "parameters": [
          {
            "style": "simple",
            "explode": false,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "String"
            }
          }
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "arguments": {
        "id": {
          "description": "The id of the OAuth 2.0 Client.",
          "type": {
            "name": "String",
            "type": "named"
          }
        }
      },
      "description": "Delete OAuth 2.0 Client using the OpenID Dynamic Client Registration Management Protocol",
      "name": "deleteOidcDynamicClient",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    {
      "request": {
        "url": "/oauth2/revoke",
        "method": "post",
        "requestBody": {
          "contentType": "application/x-www-form-urlencoded",
          "schema": {
            "type": "RevokeOAuth2TokenRequest",
            "nullable": true
          }
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /oauth2/revoke",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RevokeOAuth2TokenRequest",
              "type": "named"
            }
          }
        }
      },
      "description": "Revoke OAuth 2.0 Access or Refresh Token",
      "name": "revokeOAuth2Token",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    {
      "request": {
        "url": "/oauth2/token",
        "method": "post",
        "requestBody": {
          "contentType": "application/x-www-form-urlencoded",
          "schema": {
            "type": "Oauth2TokenExchangeRequest",
            "nullable": true
          }
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /oauth2/token",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Oauth2TokenExchangeRequest",
              "type": "named"
            }
          }
        }
      },
      "description": "The OAuth 2.0 Token Endpoint",
      "name": "oauth2TokenExchange",
      "result_type": {
        "name": "OAuth2TokenExchange",
        "type": "named"
      }
    }
  ],
  "scalar_types": {
    "Boolean": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "boolean"
      }
    },
    "Int64": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "int64"
      }
    },
    "JSON": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "OAuth2CodeChallenge": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "plain",
          "S256"
        ],
        "type": "enum"
      }
    },
    "OAuth2GrantType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "authorization_code",
          "implicit",
          "client_credentials",
          "refresh_token"
        ],
        "type": "enum"
      }
    },
    "OAuth2ResponseType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "code",
          "token",
          "id_token"
        ],
        "type": "enum"
      }
    },
    "OAuth2Scope": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "offline_access",
          "offline",
          "openid"
        ],
        "type": "enum"
      }
    },
    "OAuth2SigningAlgorithm": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "none",
          "RS256",
          "ES256"
        ],
        "type": "enum"
      }
    },
    "OpenIDConnectSubjectType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "public",
          "pairwise"
        ],
        "type": "enum"
      }
    },
    "String": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "string"
      }
    },
    "TimestampTZ": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "timestamptz"
      }
    },
    "TokenEndpointAuthMethod": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "client_secret_post",
          "client_secret_basic",
          "client_secret_jwt",
          "private_key_jwt",
          "none"
        ],
        "type": "enum"
      }
    }
  }
}
